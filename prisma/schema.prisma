datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String               @id @default(cuid())
  crsid              String               @unique
  ravenId            String               @unique
  admin              Boolean              @default(false)
  lecturer           Boolean              @default(false)
  picture            String?
  name               String?
  triposPartId       Int?
  triposPart         TriposPart?          @relation(fields: [triposPartId], references: [id])
  triposId           Int?
  tripos             Tripos?              @relation(fields: [triposId], references: [id])
  UserQuestionAnswer UserQuestionAnswer[]
  Thread             Thread[]
  ThreadUpvote       ThreadVote[]
  Reply              Reply[]
  sessions           UserSession[]
  CourseYearLecturer CourseYearLecturer[]
  Lecture            Lecture[]
}

model UserSession {
  id         String   @id
  expires_at DateTime
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
}

model Tripos {
  id         Int          @id @default(autoincrement())
  name       String
  code       String
  TriposPart TriposPart[]
  User       User[]
}

model TriposPart {
  id       Int      @id @default(autoincrement())
  name     String
  tripos   Tripos   @relation(fields: [triposId], references: [id])
  triposId Int
  Course   Course[]
  Paper    Paper[]
  User     User[]

  @@unique([name, triposId])
}

model Course {
  id           Int          @id @default(autoincrement())
  code         String
  name         String
  triposPart   TriposPart   @relation(fields: [triposPartId], references: [id])
  triposPartId Int
  CourseYear   CourseYear[]

  @@unique([code, triposPartId])
}

model CourseYear {
  id                       Int                      @id @default(autoincrement())
  course                   Course                   @relation(fields: [courseId], references: [id])
  courseId                 Int
  year                     String
  courseYearUrl            String
  michaelmas               Boolean
  lent                     Boolean
  easter                   Boolean
  lectures                 Int
  suggestedSupervisions    Int
  description              Bytes
  Question                 Question[]
  CourseYearLecturer       CourseYearLecturer[]
  CourseYearPrerequisite   CourseYearPrerequisite[] @relation(name: "CourseYearPrerequisite")
  CourseYearPrerequisiteOf CourseYearPrerequisite[] @relation(name: "CourseYearPrerequisiteOf")
  Lecture                  Lecture[]
  Tick                     Tick[]

  @@unique([courseId, year])
}

model Lecture {
  id            Int        @id @default(autoincrement())
  courseYear    CourseYear @relation(fields: [courseYearId], references: [id])
  courseYearId  Int
  lecturer      User       @relation(fields: [lecturerId], references: [id])
  lecturerId    String
  number        Int
  time          DateTime?
  location      Location?  @relation(fields: [locationId], references: [id])
  locationId    Int?
  topic         String
  slidesLink    String?
  recordingLink String?
  summary       String?
}

model Location {
  id             Int        @id @default(autoincrement())
  name           String
  partOf         Location?  @relation(fields: [partOfId], references: [id], name: "LocationPartOf")
  LocationPartOf Location[] @relation(name: "LocationPartOf")
  partOfId       Int?
  googleMapsURL  String?
  Lecture        Lecture[]
}

model Tick {
  id           Int        @id @default(autoincrement())
  courseYear   CourseYear @relation(fields: [courseYearId], references: [id])
  courseYearId Int
  name         String
  link         String
  deadline     DateTime
}

model CourseYearPrerequisite {
  id             Int        @id @default(autoincrement())
  courseYear     CourseYear @relation(name: "CourseYearPrerequisite", fields: [courseYearId], references: [id])
  courseYearId   Int
  prerequisite   CourseYear @relation(name: "CourseYearPrerequisiteOf", fields: [prerequisiteId], references: [id])
  prerequisiteId Int
}

model CourseYearLecturer {
  id           Int        @id @default(autoincrement())
  courseYear   CourseYear @relation(fields: [courseYearId], references: [id])
  courseYearId Int
  lecturer     User       @relation(fields: [lecturerId], references: [id])
  lecturerId   String

  @@unique([courseYearId, lecturerId])
}

model Paper {
  id           Int         @id @default(autoincrement())
  name         String
  TriposPart   TriposPart  @relation(fields: [triposPartId], references: [id])
  triposPartId Int
  PaperYear    PaperYear[]
}

model PaperYear {
  id           Int        @id @default(autoincrement())
  paper        Paper      @relation(fields: [paperId], references: [id])
  paperId      Int
  year         String
  paperYearUrl String
  Question     Question[]
}

model Question {
  id                 Int                  @id @default(autoincrement())
  paperYear          PaperYear            @relation(fields: [paperYearId], references: [id])
  paperYearId        Int
  courseYear         CourseYear           @relation(fields: [courseYearId], references: [id])
  courseYearId       Int
  questionNumber     Int
  questionUrl        String
  solutionUrl        String
  UserQuestionAnswer UserQuestionAnswer[]
  Thread             Thread[]
}

model UserQuestionAnswer {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  timeTaken  Int?
  createdAt  DateTime @default(now())
  difficulty Int?
}

model Thread {
  id           Int          @id @default(autoincrement())
  author       User         @relation(fields: [authorId], references: [id])
  authorId     String
  question     Question     @relation(fields: [questionId], references: [id])
  questionId   Int
  content      String
  createdAt    DateTime     @default(now())
  ThreadUpvote ThreadVote[]
  Reply        Reply[]
}

model ThreadVote {
  id       Int     @id @default(autoincrement())
  thread   Thread  @relation(fields: [threadId], references: [id])
  threadId Int
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  positive Boolean
}

model Reply {
  id        Int      @id @default(autoincrement())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  thread    Thread   @relation(fields: [threadId], references: [id])
  threadId  Int
  content   String
  createdAt DateTime @default(now())
}
